<Project>

  <!--
  This targets file will be bundled with a NuGet package of this library in 'build' package path,
  and will be imported the project file that references this package.
  -->

  <!-- DEFINE MSBUILD PROPERTIES FOR I18N TEXT -->
  <PropertyGroup>
    <I18nTextSourceSubDirectory Condition=" '$(I18nTextSourceSubDirectory)' == '' ">i18ntext</I18nTextSourceSubDirectory>
    <I18nTextSourceDirectory Condition=" '$(I18nTextSourceDirectory)' == '' ">$(ProjectDir)$(I18nTextSourceSubDirectory)</I18nTextSourceDirectory>
    <I18nTextFilePattern Condition=" '$(I18nTextFilePattern)' == '' ">$(I18nTextSourceSubDirectory)\**\*.json;$(I18nTextSourceSubDirectory)\**\*.csv</I18nTextFilePattern>
    <I18nTextNamespace Condition=" '$(I18nTextNamespace)' == '' ">$(RootNamespace).I18nText</I18nTextNamespace>
    <I18nTextFallBackLanguage Condition=" '$(I18nTextFallBackLanguage)' == '' ">en</I18nTextFallBackLanguage>
    <I18nTextDisableSubNameSpace Condition=" '$(I18nTextDisableSubNameSpace)' == '' ">false</I18nTextDisableSubNameSpace>
    <I18nTextIntermediateDir>$(ProjectDir)$(IntermediateOutputPath)dist\_content\i18ntext\</I18nTextIntermediateDir>
    <I18nTextUseSourceGenerator>true</I18nTextUseSourceGenerator>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);PopulateI18nLocalizedTextSourceFiles</CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="EnsureI18nTextProperties" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ResolveStaticWebAssetsInputsDependsOn>_ResolveBlazorI18nTextStaticWebAssets;$(ResolveStaticWebAssetsInputsDependsOn)</ResolveStaticWebAssetsInputsDependsOn>
      <!-- The order is important: the "_RemoveBlazorI18nTextStaticWebAssetsFromPackage" target MUST BE PLACED at the LAST of the pipeline. -->
      <GenerateStaticWebAssetsPackTargetsDependsOn>$(GenerateStaticWebAssetsPackTargetsDependsOn);_RemoveBlazorI18nTextStaticWebAssetsFromPackage;</GenerateStaticWebAssetsPackTargetsDependsOn>
    </PropertyGroup>
  </Target>

  <!-- INCLUDE I18N LOCALIZED TEXT SOURCE FILES -->
  <Target Name="PopulateI18nLocalizedTextSourceFiles">
    <ItemGroup>
      <_I18nTextFile Include="$(I18nTextFilePattern)" />
      <Content Remove="@(_I18nTextFile)" />
      <ContentWithTargetPath Remove="@(_I18nTextFile)" />
      <!-- INCLUDES ~/i18ntext/*.{json|csv} FILES TO BE PROCEEDED BY I18N TEXT SOURCE GENERATOR -->
      <AdditionalFiles Remove="@(_I18nTextFile->'%(FullPath)')" />
      <AdditionalFiles Include="@(_I18nTextFile->'%(FullPath)')" />
      <_I18nTextFile Remove="@(_I18nTextFile)" />
    </ItemGroup>
  </Target>

  <!-- EXCLUDE I18N LOCALIZED TEXT SOURCE FILES FROM PUBLISHING CONTENTS -->
  <Target Name="OmmitI18nLocalizedTextSourceFileFromContent" BeforeTargets="GetCopyToPublishDirectoryItems">
    <ItemGroup>
      <_I18nTextFile Include="$(I18nTextFilePattern)" />
      <Content Remove="@(_I18nTextFile)" />
      <ContentWithTargetPath Remove="@(_I18nTextFile)" />
      <_I18nTextFile Remove="@(_I18nTextFile)" />
    </ItemGroup>
  </Target>

  <!-- EXPOSE MSBUILD PROPERTY TO I18N TEXT SOURCE GENERATOR -->
  <ItemGroup>
    <CompilerVisibleProperty Include="ProjectDir" />
    <CompilerVisibleProperty Include="RootNamespace" />
    <CompilerVisibleProperty Include="I18nTextNamespace" />
    <CompilerVisibleProperty Include="I18nTextSourceDirectory" />
    <CompilerVisibleProperty Include="I18nTextFallBackLanguage" />
    <CompilerVisibleProperty Include="I18nTextDisableSubNameSpace" />
    <CompilerVisibleProperty Include="I18nTextIntermediateDir" />
    <CompilerVisibleProperty Include="I18nTextUseSourceGenerator" />
  </ItemGroup>

  <!-- FOR DOTNET WATCH -->
  <ItemGroup Condition=" '$(DotNetWatchBuild)' == 'true' ">
    <_I18nTextFile Include="$(I18nTextFilePattern)" />
    <Watch Remove="@(_I18nTextFile->'%(FullPath)')" />
    <Watch Include="@(_I18nTextFile->'%(FullPath)')" />
    <_I18nTextFile Remove="@(_I18nTextFile)" />
  </ItemGroup>

  <!-- INCLUDE GENERATED I18N TEXT RESOURCE JSONS -->
  <UsingTask TaskName="_Toolbelt_ComputeHash" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ComputedItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Numerics" />
      <Using Namespace="System.Security.Cryptography" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[

      static byte[] ComputeHash(ITaskItem item) {
          var path = item.GetMetadata("OriginalItemSpec");
          if (!File.Exists(path)) path = item.GetMetadata("FullPath");
          if (!File.Exists(path)) path = item.GetMetadata("Identity");
          var contentBytes = File.ReadAllBytes(path);
          using var sha256 = SHA256.Create();
          return sha256.ComputeHash(contentBytes);
      }

      static string ToBase36(byte[] hash)
      {
          var array = new char[10];
          var buff = new byte[10];
          Array.Copy(hash, buff, 10);
          var dividend = BigInteger.Abs(new BigInteger(buff));
          for (var i = 0; i < 10; i++)
          {
              dividend = BigInteger.DivRem(dividend, 36, out var remainder);
              array[i] = "0123456789abcdefghijklmnopqrstuvwxyz"[(int)remainder];
          }
          return new string(array);
      }

      foreach (var item in this.Items) {
          var hash = ComputeHash(item);
          item.SetMetadata("Integrity", Convert.ToBase64String(hash));
          item.SetMetadata("Fingerprint", ToBase36(hash));
      }

      this.ComputedItems = this.Items;
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="_ResolveBlazorI18nTextStaticWebAssets" DependsOnTargets="CoreCompile">

    <ItemGroup>
      <_IntermediateBlazorI18nTextResourceJsons Include="$(I18nTextIntermediateDir)*.json" />
    </ItemGroup>

    <_Toolbelt_ComputeHash Items="@(_IntermediateBlazorI18nTextResourceJsons)">
      <Output TaskParameter="ComputedItems" ItemName="_ComputedBlazorI18nTextResourceJsons" />
    </_Toolbelt_ComputeHash>

    <ItemGroup>
      <StaticWebAsset Include="@(_ComputedBlazorI18nTextResourceJsons)">
        <SourceType>Computed</SourceType>
        <SourceId>$(PackageId)</SourceId>
        <ContentRoot>%(RelativeDir)</ContentRoot>
        <BasePath>/</BasePath>
        <RelativePath>_content/i18ntext/%(FileName)%(Extension)</RelativePath>
        <OriginalItemSpec>%(FullPath)</OriginalItemSpec>
        <AssetKind>All</AssetKind>
        <AssetMode>All</AssetMode>
        <AssetRole>Primary</AssetRole>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <TargetPath>wwwroot\_content\i18ntext\%(Filename)%(Extension)</TargetPath>
      </StaticWebAsset>
    </ItemGroup>
  </Target>

  <Target Name="_RemoveBlazorI18nTextStaticWebAssetsFromPackage" DependsOnTargets="_ResolveBlazorI18nTextStaticWebAssets">
    <ItemGroup>
      <StaticWebAsset Remove="@(_IntermediateBlazorI18nTextResourceJsons)" />
    </ItemGroup>
  </Target>

  <!-- THE OPTIMIZATION FLAG, WHETHER ENABLING USING THE IL-LINKER FOR BROWSER-WASM PLATFORM OR NOT -->
  <PropertyGroup>
    <ToolbeltBlazorI18nTextOptimizeForWasm Condition=" '$(ToolbeltBlazorI18nTextOptimizeForWasm)' == '' ">true</ToolbeltBlazorI18nTextOptimizeForWasm>
  </PropertyGroup>

  <ItemGroup Condition=" '$(RuntimeIdentifier)' == 'browser-wasm' AND '$(ToolbeltBlazorI18nTextOptimizeForWasm)' == 'true' ">
    <RuntimeHostConfigurationOption Include="Toolbelt.Blazor.I18nText.OptimizeForWasm" Value="true" Trim="true" />
  </ItemGroup>

</Project>